import ImageUploader from '@/components/uploader/ImageUploader'
import { RootState } from '@/lib/store'
import React, { useState } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import api from '@/lib/axios'
import { setProfilePhotos } from '@/lib/features/user/userSlice'
import { Eye, EyeOff, Lock, Unlock } from 'lucide-react'

const ProfileMyPhotos = () => {
  const photos = useSelector((state: RootState) => state.user.profile_photos)
  const [selectedPhotos, setSelectedPhotos] = useState<number[]>([])
  const [visiblePhotos, setVisiblePhotos] = useState<number[]>([])

  const dispatch = useDispatch()

  const handleSelectPhoto = (photoId: number) => {
    setSelectedPhotos((prevSelected) =>
      prevSelected.includes(photoId)
        ? prevSelected.filter((id) => id !== photoId)
        : [...prevSelected, photoId]
    )
  }

  const togglePhotoVisibility = (photoId: number) => {
    setVisiblePhotos((prevVisible) =>
      prevVisible.includes(photoId)
        ? prevVisible.filter((id) => id !== photoId)
        : [...prevVisible, photoId]
    )
  }

  const handleDelete = async (photoId: number) => {
    try {
      const response = await api.delete(`/cloudinary/delete/${photoId}`)
      if (response.data.success) {
        setSelectedPhotos([])
        dispatch(setProfilePhotos(photos!.filter((photo) => photo.id !== photoId)))
      } else {
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ.")
      }
    } catch (error) {
      console.error("Delete error", error)
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ.")
    }
  }

  const handleDeleteMultiple = async () => {
    try {
      const response = await api.delete('/cloudinary/delete-multiple', {
        data: { ids: selectedPhotos }
      })

      if (response.data.success) {
        dispatch(setProfilePhotos(photos!.filter((photo) => !selectedPhotos.includes(photo.id))))
        setSelectedPhotos([])
      } else {
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó.")
      }
    } catch (error) {
      console.error("Delete multiple error", error)
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π.")
    }
  }

  const handleTogglePrivate = async (makePrivate: boolean) => {
    try {
      const response = await api.patch('/cloudinary/toggle-private', {
        ids: selectedPhotos,
        makePrivate,
      })

      if (response.data.success) {
        const updated = photos!.map(photo =>
          selectedPhotos.includes(photo.id)
            ? { ...photo, private: makePrivate }
            : photo
        )
        dispatch(setProfilePhotos(updated))
        setSelectedPhotos([])
      } else {
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ç–æ.")
      }
    } catch (error) {
      console.error("Toggle private error:", error)
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ.")
    }
  }

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-semibold">My Photos</h2>

      <ImageUploader />

      {selectedPhotos.length > 0 && (
        <div className="flex flex-wrap gap-2">
          <button
            onClick={handleDeleteMultiple}
            className="bg-red-500 text-white p-2 rounded-lg"
          >
            –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ
          </button>
          <button
            onClick={() => handleTogglePrivate(true)}
            className="bg-yellow-500 text-white p-2 rounded-lg flex items-center gap-1"
          >
            <Lock size={16} /> –ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º–∏
          </button>
          <button
            onClick={() => handleTogglePrivate(false)}
            className="bg-green-600 text-white p-2 rounded-lg flex items-center gap-1"
          >
            <Unlock size={16} /> –ó—Ä–æ–±–∏—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–º–∏
          </button>
        </div>
      )}

      {photos && photos.length > 0 ? (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 mt-4">
          {photos.map((photo, index) => {
            const isSelected = selectedPhotos.includes(photo.id)
            const isPrivate = photo.private
            const isVisible = visiblePhotos.includes(photo.id)

            return (
              <div
                key={photo.id}
                className={`relative overflow-hidden rounded-lg shadow-md ${
                  isSelected ? 'border-2 border-teal-500' : ''
                }`}
              >
                <img
                  src={photo.url}
                  alt={`Photo ${index + 1}`}
                  className={`object-cover w-full h-48 cursor-pointer transition duration-300 ${
                    isPrivate && !isVisible ? 'blur-md grayscale' : ''
                  }`}
                  onClick={() => handleSelectPhoto(photo.id)}
                />

                {/* –ü–æ–∫–∞–∑–∞—Ç–∏ / –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–µ —Ñ–æ—Ç–æ */}
                {isPrivate && (
                  <button
                    onClick={() => togglePhotoVisibility(photo.id)}
                    className="absolute top-2 left-2 bg-black/50 text-white p-1 rounded-full"
                  >
                    {isVisible ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                )}

                {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∏–±–æ—Ä—É */}
                {isSelected && (
                  <div className="absolute top-2 right-2 bg-teal-500 text-white rounded-full p-1">
                    ‚úì
                  </div>
                )}

                {/* –í–∏–¥–∞–ª–∏—Ç–∏ –æ–¥–Ω–µ —Ñ–æ—Ç–æ */}
                <button
                  onClick={() => handleDelete(photo.id)}
                  className="absolute bottom-2 right-2 bg-red-500 text-white p-2 rounded-full"
                >
                  üóëÔ∏è
                </button>
              </div>
            )
          })}
        </div>
      ) : (
        <p className="text-gray-500 mt-4">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.</p>
      )}
    </div>
  )
}

export default ProfileMyPhotos
